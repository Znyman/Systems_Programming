#include <iostream>

#include "PackedArray.h"

// Create the array; initialize memory
PackedArray CreateArray(int aSize)
{
	PackedArray array
	{
		new uint64_t[aSize],
		aSize
	};
	return array;
}

// Frees memory for the array
void FreeArray(PackedArray &array)
{
	delete[] array.rows;
	array.rows = NULL;
}

// Sets all entries in the array to value parameter
void FillArray(PackedArray &array, uint64_t value)
{
	for (int row = 0; row < array.numRows; row++)
	{
		array.rows[row] = 0;
		for (int col = 0; col < 32; col++)
		{
			SetEntry(array, row, col, value);
		}
	}
}

// Clears all entries to 0 in the array
void ClearArray(PackedArray &array)
{
	for (int i = 0; i < array.numRows; i++)
	{
		array.rows[i] = 0;
	}
}

// Get the value of the entry at the specified row and col.
// If row or col are outside of the range for this PackedArray,
// returns 0.
int GetEntry(const PackedArray &array, int row, int col)
{
	if (col > 31 || row > array.numRows - 1)
	{
		std::cout << "Outside of the range" << std::endl;
		return 0;
	}
	return (array.rows[row] >> 2 * col) & 3;
}

// Sets entry in the location row, col to the specified value.
// If row or col are outside of the range for this PackedArray,
// function has no effect.
void SetEntry(PackedArray &array, int row, int col, uint64_t value)
{
	if (col > 31 || row > array.numRows - 1)
	{
		return;
	}
	value <<= 2*col;
	array.rows[row] |= value;
}

// Sum all the entries in the array
int SumEntries(const PackedArray &array)
{
	int total = 0;
	for (int row = 0; row < array.numRows; row++)
	{
		for (int col = 0; col < 32; col++)
		{
			total += GetEntry(array, row, col);
		}
	}
	return total;
}